using System;
using System.Collections.ObjectModel;
using System.Windows.Input;

using GalaSoft.MvvmLight;
using GalaSoft.MvvmLight.Command;
using GalaSoft.MvvmLight.Messaging;
using GalaSoft.MvvmLight.Threading;

using TSFCS.SCOP.Helper;
using TSFCS.SCOP.Model;
using TSFCS.SCOP.Udp;

namespace TSFCS.SCOP.ViewModel
{
    public class PowerViewModel : ViewModelBase
    {
        #region Power Switch Bytes
        /// <summary>
        /// 遥控指令字节
        /// </summary>
        private byte[,] bytePowerSwitch = new byte[,]
        {
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E},
            {0xEB, 0x90, 0xB4, 0x1C, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F}
        };
        #endregion

        #region Field
        private ObservableCollection<PowerSwitchModel> powerSwitch;
        private PageHelper<PowerSwitchModel> powerSwitchPage;  //分页
        private ObservableCollection<PowerDataModel> powerData;
        #endregion

        #region Property
        public ObservableCollection<PowerSwitchModel> PowerSwitch
        {
            get { return powerSwitch; }
            set 
            {
                powerSwitch = value;
                RaisePropertyChanged("PowerSwitch");
            }
        }

        public ObservableCollection<PowerDataModel> PowerData
        {
            get { return powerData; }
            set
            { 
                powerData = value;
                RaisePropertyChanged("PowerData");
            }
        }
        #endregion

        #region Command
        private bool CanNextExecute()
        {
            return true;
        }
        private void NextExecute()
        {
            if (powerSwitchPage != null)
            {
                DispatcherHelper.CheckBeginInvokeOnUI(() =>
                {
                    PowerSwitch = powerSwitchPage.GetPageData(EJumpOperation.GoNext);
                });
            }
        }
        public ICommand NextCommand { get { return new RelayCommand(NextExecute, CanNextExecute); } }

        private bool CanPreviousExecute()
        {
            return true;
        }
        private void PreviousExecute()
        {
            if (powerSwitchPage != null)
            {
                DispatcherHelper.CheckBeginInvokeOnUI(() =>
                {
                    PowerSwitch = powerSwitchPage.GetPageData(EJumpOperation.GoPrevious);
                });
            }
        }
        public ICommand PreviousCommand { get { return new RelayCommand(PreviousExecute, CanPreviousExecute); } }

        private bool CanOnOffExecute(int index)
        {
            return true;
        }
        private void OnOffExecute(int index)
        {
            //Messenger.Default.Send<string>(Convert.ToString(this.tlcPage.CurrentIndex * 16 + index), "Alert");

            if (index < 0)
                return;

            UdpMessage cmd = new UdpMessage();
            cmd.Payload = new byte[11];
            Buffer.BlockCopy(bytePowerSwitch, (this.powerSwitchPage.CurrentIndex * 16 + index) * 11, cmd.Payload, 0, 11);
            cmd.Length = 11;
            //cmd.Name = string.Format("TLC: {0}, {1}, {2}, {3}", this.Tlc[index].Num, this.Tlc[index].Name, this.Tlc[index].Status, this.Tlc[index].Content);
            //cmd.Param = null;

            Messenger.Default.Send<UdpMessage>(cmd, "Send");
        }
        public ICommand OnOffCommand { get { return new RelayCommand<int>(OnOffExecute, CanOnOffExecute); } }
        #endregion

        #region Constructor
        public PowerViewModel()
        {
            ObservableCollection<PowerSwitchModel> models = PowerSwitchModel.GetPowerSwitchs();
            powerSwitchPage = new PageHelper<PowerSwitchModel>(models, 16);
            PowerSwitch = powerSwitchPage.GetPageData(EJumpOperation.GoHome);

            PowerData = PowerDataModel.GetPowerDatas();
        }
        #endregion

        #region Method
        #endregion
    }
}
